{"version":3,"sources":["formula.js"],"names":["formulajs","require","baseFormulas","key","title","render","ary","reduce","a","b","Number","length","Math","max","map","v","min","join","formulas","formulaCalc","XLSX_CALC","import_functions","xlsx_Fx","Object","keys","forEach","i","args","push","formulam","f"],"mappings":"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","sourceRoot":"/Users/wen/Desktop/work/vue/edit/node_modules/x-spreadsheet-master/src/core","sourcesContent":["/**\n formula:\n key\n title\n render\n */\nimport {tf} from '../locale/locale';\nimport XLSX_CALC from \"xlsx-calc\"\n\nvar formulajs = require('formulajs');\n\nconst baseFormulas = [\n    {\n        key: 'SUM',\n        title: tf('formula.sum'),\n        render: ary => ary.reduce((a, b) => Number(a) + Number(b), 0),\n    },\n    {\n        key: 'AVERAGE',\n        title: tf('formula.average'),\n        render: ary => ary.reduce((a, b) => Number(a) + Number(b), 0) / ary.length,\n    },\n    {\n        key: 'MAX',\n        title: tf('formula.max'),\n        render: ary => Math.max(...ary.map(v => Number(v))),\n    },\n    {\n        key: 'MIN',\n        title: tf('formula.min'),\n        render: ary => Math.min(...ary.map(v => Number(v))),\n    },\n    {\n        key: 'CONCAT',\n        title: tf('formula.concat'),\n        render: ary => ary.join(''),\n    },\n    {\n        key: 'MD.WLAND',\n        title: tf('formula.wland'),\n        render: ary => ary.join(''),\n    },\n    {\n        key: 'MD.WFR',\n        title: tf('formula.wfr'),\n        render: ary => ary.join(''),\n    },\n];\n\nlet formulas = baseFormulas;\n\nconst formulaCalc = () => {\n    XLSX_CALC.import_functions(formulajs);\n    let xlsx_Fx = XLSX_CALC.xlsx_Fx;\n    formulas = [];\n    Object.keys(xlsx_Fx).forEach(i => {\n        let args = {\n            key: i,\n            title: i,\n            render: xlsx_Fx[i]\n        }\n        formulas.push(args);\n    });\n    return XLSX_CALC;\n};\n\n// const formulas = (formulaAry = []) => {\n//   const formulaMap = {};\n//   baseFormulas.concat(formulaAry).forEach((f) => {\n//     formulaMap[f.key] = f;\n//   });\n//   return formulaMap;\n// };\nconst formulam = {};\nbaseFormulas.forEach((f) => {\n    formulam[f.key] = f;\n});\n\nexport default {};\n\nexport {\n    formulam,\n    formulas,\n    baseFormulas,\n    formulaCalc,\n};\n"]}