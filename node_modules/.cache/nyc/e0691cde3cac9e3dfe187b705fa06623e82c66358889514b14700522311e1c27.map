{"version":3,"sources":["cell.js"],"names":["infixExprToSuffixExpr","src","operatorStack","stack","subStrs","fnArgType","fnArgsLen","i","length","c","charAt","push","toUpperCase","join","c1","pop","ex","ey","sx","sy","rangelen","x","y","e","top","evalSubExpr","subExpr","cellRender","Number","substring","evalSuffixExpr","srcStack","formulaMap","cellList","Array","isArray","formula","len","params","j","render","reverse","includes","s","evalFormula","text","rule","indexOf","data","sheetbook","getCellText","Sheets","Sheet1","value","v"],"mappings":"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","sourceRoot":"/Users/wen/Desktop/work/vue/edit/node_modules/x-spreadsheet-master/src/core","sourcesContent":["import {expr2xy, xy2expr} from './alphabet';\n// import XLSX_CALC from \"xlsx-calc\"\n// var formulajs = require('formulajs');\n// Converting infix expression to a suffix expression\n// src: AVERAGE(SUM(A1,A2), B1) + 50 + B20\n// return: [A1, A2], SUM[, B1],AVERAGE,50,+,B20,+\nconst infixExprToSuffixExpr = (src) => {\n    const operatorStack = [];\n    const stack = [];\n    let subStrs = []; // SUM, A1, B2, 50 ...\n    let fnArgType = 0; // 1 => , 2 => :\n    let fnArgsLen = 1; // A1,A2,A3...\n    for (let i = 0; i < src.length; i += 1) {\n        const c = src.charAt(i);\n        // console.log('c:', c);\n        if (c !== ' ') {\n            if (c >= 'a' && c <= 'z') {\n                subStrs.push(c.toUpperCase());\n            } else if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || c === '.') {\n                subStrs.push(c);\n            } else if (c === '\"') {\n                i += 1;\n                while (src.charAt(i) !== '\"') {\n                    subStrs.push(src.charAt(i));\n                    i += 1;\n                }\n                stack.push(`\"${subStrs.join('')}`);\n                subStrs = [];\n            } else {\n                // console.log('subStrs:', subStrs.join(''), stack);\n                if (c !== '(' && subStrs.length > 0) {\n                    stack.push(subStrs.join(''));\n                }\n                if (c === ')') {\n                    let c1 = operatorStack.pop();\n                    if (fnArgType === 2) {\n                        // fn argument range => A1:B5\n                        try {\n                            const [ex, ey] = expr2xy(stack.pop());\n                            const [sx, sy] = expr2xy(stack.pop());\n                            // console.log('::', sx, sy, ex, ey);\n                            let rangelen = 0;\n                            for (let x = sx; x <= ex; x += 1) {\n                                for (let y = sy; y <= ey; y += 1) {\n                                    stack.push(xy2expr(x, y));\n                                    rangelen += 1;\n                                }\n                            }\n                            stack.push([c1, rangelen]);\n                        } catch (e) {\n                            // console.log(e);\n                        }\n                    } else if (fnArgType === 1) {\n                        // fn argument => A1,A2,B5\n                        stack.push([c1, fnArgsLen]);\n                        fnArgsLen = 1;\n                    } else {\n                        // console.log('c1:', c1, fnArgType, stack, operatorStack);\n                        while (c1 !== '(') {\n                            stack.push(c1);\n                            if (operatorStack.length <= 0) break;\n                            c1 = operatorStack.pop();\n                        }\n                    }\n                    fnArgType = 0;\n                } else if (c === ':') {\n                    fnArgType = 2;\n                } else if (c === ',') {\n                    fnArgType = 1;\n                    fnArgsLen += 1;\n                } else if (c === '(' && subStrs.length > 0) {\n                    // function\n                    operatorStack.push(subStrs.join(''));\n                } else {\n                    // priority: */ > +-\n                    // console.log(operatorStack, c, stack);\n                    if (operatorStack.length > 0 && (c === '+' || c === '-')) {\n                        let top = operatorStack[operatorStack.length - 1];\n                        if (top !== '(') stack.push(operatorStack.pop());\n                        if (top === '*' || top === '/') {\n                            while (operatorStack.length > 0) {\n                                top = operatorStack[operatorStack.length - 1];\n                                if (top !== '(') stack.push(operatorStack.pop());\n                                else break;\n                            }\n                        }\n                    }\n                    operatorStack.push(c);\n                }\n                subStrs = [];\n            }\n        }\n    }\n    if (subStrs.length > 0) {\n        stack.push(subStrs.join(''));\n    }\n    while (operatorStack.length > 0) {\n        stack.push(operatorStack.pop());\n    }\n    return stack;\n};\n\nconst evalSubExpr = (subExpr, cellRender) => {\n    if (subExpr[0] >= '0' && subExpr[0] <= '9') {\n        return Number(subExpr);\n    }\n    if (subExpr[0] === '\"') {\n        return subExpr.substring(1);\n    }\n    const [x, y] = expr2xy(subExpr);\n    return cellRender(x, y);\n};\n\n// evaluate the suffix expression\n// srcStack: <= infixExprToSufixExpr\n// formulaMap: {'SUM': {}, ...}\n// cellRender: (x, y) => {}\nconst evalSuffixExpr = (srcStack, formulaMap, cellRender, cellList) => {\n    const stack = [];\n    // console.log(':::::formulaMap:', formulaMap);\n    for (let i = 0; i < srcStack.length; i += 1) {\n        // console.log(':::>>>', srcStack[i]);\n        if (srcStack[i] === '+') {\n            const top = stack.pop();\n            stack.push(Number(stack.pop()) + Number(top));\n        } else if (srcStack[i] === '-') {\n            const top = stack.pop();\n            stack.push(Number(stack.pop()) - Number(top));\n        } else if (srcStack[i] === '*') {\n            stack.push(Number(stack.pop()) * Number(stack.pop()));\n        } else if (srcStack[i] === '/') {\n            const top = stack.pop();\n            stack.push(Number(stack.pop()) / Number(top));\n        } else if (Array.isArray(srcStack[i])) {\n            const [formula, len] = srcStack[i];\n            const params = [];\n            for (let j = 0; j < len; j += 1) {\n                params.push(stack.pop());\n            }\n            stack.push(formulaMap[formula].render(params.reverse()));\n        } else {\n            if (cellList.includes(srcStack[i])) {\n                return 0;\n            }\n            cellList.push(srcStack[i]);\n            let s = evalSubExpr(srcStack[i], cellRender)\n            stack.push(evalSubExpr(srcStack[i], cellRender));\n        }\n        // console.log('stack:', stack);\n    }\n    return stack[0];\n};\n\nfunction evalFormula(text, rule) {\n    if (typeof text !== 'string') {\n        return false;\n    }\n    if (text.toUpperCase().indexOf(rule.toUpperCase()) == -1) {\n        return false;\n    }\n    return true;\n}\n\nconst cellRender = (data, sheetbook, y, x, src, formulaMap, getCellText, cellList = []) => {\n    if (src[0] === '=' && src[1] !== '=') {\n        // console.log(\"156\", sheetbook.Sheets.Sheet1[xy2expr(x, y)], xy2expr(x, y))\n        if (evalFormula(src.substring(1), \"wland\") || evalFormula(src.substring(1), \"wfr\")) {\n            // let {formula} = data.settings;\n            // formula.wland(formula, data);\n            return src.toUpperCase();\n        } else if (src.substring(1) && sheetbook.Sheets.Sheet1[xy2expr(x, y)]) {\n            // sheetbook.Sheets.Sheet1[xy2expr(x, y)].f = src.substring(1).toUpperCase();\n            // XLSX_CALC.import_functions(formulajs);\n            // XLSX_CALC(sheetbook);\n            let value = sheetbook.Sheets.Sheet1[xy2expr(x, y)].v ? sheetbook.Sheets.Sheet1[xy2expr(x, y)].v : \"NaN\";\n            return value;\n        }\n        const stack = infixExprToSuffixExpr(src.substring(1));\n        if (stack.length <= 0) return src;\n\n        return evalSuffixExpr(\n            stack,\n            formulaMap,\n            (x, y) => cellRender(getCellText(x, y), formulaMap, getCellText, cellList, sheetbook),\n            cellList,\n        );\n    }\n    return src;\n};\n\nexport default {\n    render: cellRender,\n};\nexport {\n    infixExprToSuffixExpr,\n};\n"]}